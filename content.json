{"meta":{"title":"abelzzg","subtitle":"the blog as a personal recorder.","description":"this is a public blog recording some technologic personal articles.","author":"Abelzzg","url":"http://abelzzg.com"},"posts":[{"title":"robotium自动化测试解决方案","slug":"robotium自动化测试解决方案","date":"2016-07-31T02:42:29.000Z","updated":"2017-02-23T06:46:56.000Z","comments":true,"path":"2016/07/31/robotium自动化测试解决方案/","link":"","permalink":"http://abelzzg.com/2016/07/31/robotium自动化测试解决方案/","excerpt":"","text":"要做自动化测试了为了及时发现并解决版本迭代中遇到的坑爹问题，为救苦大仇深的测试同学于水火，这是研究了好长好长时间的结果，也是对android自动化技术的应用的总结，也加深了自己对android运行原理的了解。github上是自己写的android自动化测试工具SDK，懒得导成jar，自动生成测试报告，自动截图，自动获取控制台log，自动记录每一步操作。解决测试报告不友好、不能自动截图和报告分析的问题。 📣首先跟想直接拿来用的同学说明一下，测试报告生成路径可以自行修改，整个测试报告没有进行压缩，产生截图多时可能会占用设备空间。 1.测试工具功能：1.1 当测试脚本运行失败时，工具会自动截图，测试报告里相应失败步骤会产生html超级链接，点击链接会看到失败时的截图； 1.2 当测试脚本运行时，程序突然崩溃，工具会记录异常栈信息和截图，两者也是一html超级链接的形式来展现； 1.3 测试开发编写测试脚本，测试工具会根据脚本的具体调用产生详细的步骤描述，并体现在测试报告中，方便开发人员解决问题。 2.测试报告测试报告首页 点击各测试case标题可以查看各具体用例执行情况 点击case标题可以查看执行case时控制台日志 当测试步骤中有状态为异常或者失败时，点击状态栏，可以查看运行时失败截图 如果执行测试用例时，程序出现崩溃，工具会记录崩溃日志。点击异常日志即可查看崩溃异常栈和一些崩溃时设备信息，方便开发人员分析崩溃原因。 3.集成自动化测试解决方案实现：用重写的robotium做android自动化测试框架，通过jenkins持续集成来实现自动化测试。自动化测试可以让开发者提交对源码的修改后得到快速的反馈，随时随地生成部署文件，及时反馈测试报告，并提醒相关人员修改BUG，减少产品发布延误时间，减少重复工作量，增强项目可见性。 主要技术：使用Robotium作为测试框架，Jenkins作为自动化构建平台，Gradle作为Android项目构建工具，并且配合SDK的Tools工具创建自动化测试需要的AVD。 目的：android自动化测试的目的不是减少Build失败的次数，而是今早发现问题，减少风险和浪费。 ####Robotium介绍： robotium是自动化测试的框架，类似于selenium，robotium能够方便程序编写健壮、强大的自动化黑盒测试用例，能够模仿普通用户行为。 优点：1.最短时间需求写出测试用例 2.执行用例速度快 3.可以整合Jenkins和gradle进行持续集成 4.可以在只有APK文件情况下测试 3.1自动化测试Jenkins操作流程下面来说一说这个自动化解决方案，到底是怎么解决测试自动化的。 先来看看jenkins的操作流程 相关人员自动化测试操作流程 3.2 Jenkins配置说明3.2.1 SVN地址配置说明 jenkins上需要配置从测试和被测试项目的SVN地址，和check到本地的路径 -Repository URL ————&gt;为SVN地址 Local module directory (optional) —————&gt;为本地路径（要求为workspace/yourprojectname） 配置方式如下： 3.2.2 SVN的checkout策略配置方式如下： 3.2.3 构建项目构建测试和被测试项目，我们这里用到了gradle插件去调用相应项目根目录下的build.gradle文件来构建项目。配置方式如下： 3.2.4 安装APK文件build完之后，需要在模拟器上安装构建后产生的APK文件，在安装之前需要先卸载之前可能装在模拟器上的apk文件 配置方式如下： 3.2.5 执行测试获取测试报告 adb shell am instrument -w you project packagename/com.zutubi.android.junitreport.JUnitReportTestRunner adb pull /data/data/you project package name/files/junit-report.xml /Users/yeepaymobile/.jenkins/jobs/your jenkins project name/workspace/ 配置方式如下： 3.2.6 发布测试报告利用Junit Test Result Report插件记录每次测试的测试报告，生成每次测试结果的趋势图表 配置方式如下： 生成结果如下： 3.2.7 邮件发送构建通知测试完成后，通过邮件插件发送邮件给相关收件人员 配置方式如下： 主要内容模板： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head lang=&quot;en&quot;&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;$&#123;ENV, var=&quot;JOB_NAME&quot;&#125;-第$&#123;BUILD_NUMBER&#125;次构建日志&lt;/title&gt;&lt;/head&gt;&lt;body marginleft=&quot;8&quot; marginwidth=&quot;0&quot; margintop=&quot;8&quot; marginheight=&quot;4&quot; &gt;&lt;table width=&quot;95%&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; style=&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif&quot;&gt; &lt;tr&gt; &lt;td&gt;(本邮件是程序自动下发的，请勿回复！)&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;h2&gt; &lt;font color=&quot;#0000FF&quot;&gt;测试结果 - $&#123;BUILD_STATUS&#125;&lt;/font&gt; &lt;/h2&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;br/&gt; &lt;b&gt;&lt;font color=&quot;#0B610B&quot;&gt;构建信息&lt;/font&gt;&lt;/b&gt; &lt;hr size=&quot;2&quot; width=&quot;100%&quot; align=&quot;center&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;ul&gt; &lt;li&gt;项目名称&amp;nbsp;：&amp;nbsp;$&#123;PROJECT_NAME&#125;&lt;/li&gt; &lt;li&gt;构建编号&amp;nbsp;：&amp;nbsp;第$&#123;BUILD_NUMBER&#125;次构建&lt;/li&gt; &lt;li&gt;SVN&amp;nbsp;版本：&amp;nbsp;$&#123;SVN_REVISION&#125;&lt;/li&gt; &lt;li&gt;触发原因：&amp;nbsp;$&#123;CAUSE&#125;&lt;/li&gt; &lt;li&gt;构建日志：&amp;nbsp;&lt;a href=&quot;$&#123;BUILD_URL&#125;console&quot;&gt;$&#123;BUILD_URL&#125;console&lt;/a&gt;&lt;/li&gt; &lt;li&gt;构建&amp;nbsp;&amp;nbsp;Url&amp;nbsp;：&amp;nbsp;&lt;a href=&quot;$&#123;BUILD_URL&#125;&quot;&gt;$&#123;BUILD_URL&#125;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;工作目录&amp;nbsp;：&amp;nbsp;&lt;a href=&quot;$&#123;PROJECT_URL&#125;workspace&quot;&gt;$&#123;PROJECT_URL&#125;workspace&lt;/a&gt;&lt;/li&gt; &lt;li&gt;项目&amp;nbsp;&amp;nbsp;Url&amp;nbsp;：&amp;nbsp;&lt;a href=&quot;$&#123;PROJECT_URL&#125;&quot;&gt;$&#123;PROJECT_URL&#125;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;&lt;font color=&quot;#0B610B&quot;&gt;Changes Since Last Successful Build:&lt;/font&gt;&lt;/b&gt; &lt;hr size=&quot;2&quot; width=&quot;100%&quot; align=&quot;center&quot;/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;ul&gt; &lt;li&gt;历史变更记录 : &lt;a href=&quot;$&#123;PROJECT_URL&#125;changes&quot;&gt;$&#123;PROJECT_URL&#125;changes&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;ul&gt; &lt;li&gt;Test report (if test has ran):&lt;a href=&quot;$&#123;PROJECT_URL&#125;workspace/junit-report.xml&quot;&gt;junit-report.xml&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;br/&gt; &lt;br/&gt; &lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 3.3 测试报告邮件测试完成，jenkins会发送测试报告的邮件，发送邮件策略可以自定义，收件人以“，”为分隔，邮件会显示项目的构建信息，附件是被测试程序的APK包，可用于bug重现。 总结基于robotium实现的android自动化测试框架已经讲完了，包括技术介绍、操作流程和最终实现结果。这里是github上的框架源码。网上有好多哥们儿在qq上问我这个框架怎么用，问为什么他那儿就跑不起来，为啥找不到mainActivity。其实我也弄了好长时间的android测试，这个框架是围绕android自动化测试的instrument工具和robotium的sdk来实现的，首先咱们得弄明白android自动化测试的运行原理，即使在没有robotium的情况下，我们也应该能写出这一系列的代码，然后将我们的自动化测试用例跑起来。我只是把robotium里面方法稍微封装了一下，然后加入了一个生成测试报告的功能，希望能给大家带来一些方便。好了，打完收工，谢谢乡亲们！","raw":null,"content":null,"categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://abelzzg.com/tags/android/"},{"name":"自动化测试","slug":"自动化测试","permalink":"http://abelzzg.com/tags/自动化测试/"}]},{"title":"基于aop技术的android日志收集SDK","slug":"基于aop技术的android日志收集SDK","date":"2016-05-18T02:12:38.000Z","updated":"2017-02-23T02:29:56.000Z","comments":true,"path":"2016/05/18/基于aop技术的android日志收集SDK/","link":"","permalink":"http://abelzzg.com/2016/05/18/基于aop技术的android日志收集SDK/","excerpt":"","text":"应用分析–日志采集开始给这篇blog命名的时候就想到了一个这么长的名字，很有装逼的嫌疑，但是我确实想不到更准确概况这篇文章的标题了。所以辛苦、辛苦🙏🏻。先直接上github源码地址吧!最近需要封装一个日志收集的sdk，需要记录用户星湖，又要有高度的可定制，又不想用传统的插桩打点，因为那样对很影响开发者的心情，也会降低开发和维护的效率。SO，想到了后台的ioc，aop。去找了资深后端同学了解了一下aspect和怎么做注解，以前看我们老大各种自定义注解，我们用起来很是潇洒，感觉很牛逼，这次要自己做注解了，我也牛逼一回。 传统的应用信息采集数据采集一般都离不开埋点插桩，但是大多数采集功能都需要手动地插入代码，标识某段操作的起点和终点。例如信息流的下拉刷新，工程师可以在第一个触摸事件时插入开始标记，然后在屏幕更新后插入结束标记。这种方法和Android Systrace工具所提供的功能类似。 友盟的收集方式，都是通过调用代码来实现： public void onResume() { super.onResume(); MobclickAgent.onResume(this); } public void onPause() { super.onPause(); MobclickAgent.onPause(this); } MobclickAgent.onProfileSignIn(&quot;userID&quot;); MobclickAgent.onProfileSignIn(&quot;WB&quot;，&quot;userID&quot;); 甚至连错误统计都需要开发人员去主动调用代码 MobclickAgent.setCatchUncaughtExceptions(false); public static void reportError(Context context, String error) //或 public static void reportError(Context context, Throwable e) 这种方法有诸多弊端： 开发者插桩的粒度决定了数据的详细程度，并导致这种方法只能检测可以预见的性能影响。比如，网络连接和响应的渲染通常会被列入数据采集需求中，但其中可能触发磁盘写入，而这个会严重拖慢速度，但你不一定会想起收集数据； Android应用经常使用多线程编程，用户交互的高度异步特点，导致很难彻底检测代码。你必须给应用中的子线程分配唯一识别符以保证数据的完整，而异步让采集器的回收变得困难； 最后，一般应用的开发速度很快，代码变更很频繁，这让插入的标记也必须经常变动，而且手动插入性能检测点非常耗时且容易出错。工程师的时间不应该花费在可以自动化的事情上。而且，在一个不断变化的代码库中，确保这类检测点的正确性需要做大量的工作。 在android采用AOP切面技术采集数据参考了github上AOP在Android实现切面的项目AOPforAndroid。在这里做一下简单说明：在程序运行的各个需要记录的节点进行切点的切入，记录日志的动作会在切点中进行。 这些切点其实是在在编译的时候通过特殊的编译程序aspectj编织进去的.程序编译完成之后，切点里就会有执行日志采集的代码。 这个项目旨在解决以上代码侵入和维护困难等问题，使用了aspect的一个gradle插件，和aspect用于向android框架织入切点的jar包，gradle配置如下： import com.android.build.gradle.LibraryPlugin import org.aspectj.bridge.IMessage import org.aspectj.bridge.MessageHandler import org.aspectj.tools.ajc.Main buildscript { repositories { mavenCentral() } dependencies { classpath &apos;com.android.tools.build:gradle:0.12.+&apos; classpath &apos;org.aspectj:aspectjtools:1.8.1&apos; } } apply plugin: &apos;android-library&apos; repositories { mavenCentral() } dependencies { compile &apos;org.aspectj:aspectjrt:1.8.1&apos; } android { compileSdkVersion 19 buildToolsVersion &apos;19.1.0&apos; lintOptions { abortOnError false } } android.libraryVariants.all { variant -&gt; LibraryPlugin plugin = project.plugins.getPlugin(LibraryPlugin) JavaCompile javaCompile = variant.javaCompile javaCompile.doLast { String[] args = [&quot;-showWeaveInfo&quot;, &quot;-1.5&quot;, &quot;-inpath&quot;, javaCompile.destinationDir.toString(), &quot;-aspectpath&quot;, javaCompile.classpath.asPath, &quot;-d&quot;, javaCompile.destinationDir.toString(), &quot;-classpath&quot;, javaCompile.classpath.asPath, &quot;-bootclasspath&quot;, plugin.project.android.bootClasspath.join(File.pathSeparator)] MessageHandler handler = new MessageHandler(true); new Main().run(args, handler) def log = project.logger for (IMessage message : handler.getMessages(null, true)) { switch (message.getKind()) { case IMessage.ABORT: case IMessage.ERROR: case IMessage.FAIL: log.error message.message, message.thrown break; case IMessage.WARNING: case IMessage.INFO: log.info message.message, message.thrown break; case IMessage.DEBUG: log.debug message.message, message.thrown break; } } } } 在项目中暂时只提供三种切面方式作为示例，大家可以根据自己项目需求定制自己的切面方式。 BehaviorAspect–用户行为private static final String POINTCUT_METHOD1 =&quot;execution(* android.view.View.OnClickListener .*(..))&quot;; private static final String POINTCUT_METHOD0 =&quot;execution(* android.view.View.OnLongClickListener .*(..))&quot;; private static final String POINTCUT_METHOD2 =&quot;execution(* android.app.Activity.onResume(..))&quot;; private static final String POINTCUT_METHOD3 =&quot;execution(* android.app.Activity.onPause(..))&quot;; CustomerAspect–定制切面定制切面，首先需要注册一个注解提供给开发人员使用： @Retention(RetentionPolicy.RUNTIME) @Target({ ElementType.CONSTRUCTOR, ElementType.METHOD }) public @interface CustomerTrace { String eventId(); String eventName(); } 定制切面的使用 @CustomerTrace(eventName = “定制事件”,eventId = “dingzhishijian”) public void emptymethod(){ } 然后切点指向注解标注的方法： private static final String POINTCUT_METHOD = &quot;execution(@com.abel.logservice.annotation.CustomerTrace * *(..))&quot;; private static final String POINTCUT_CONSTRUCTOR = &quot;execution(@com.abel.logservice.annotation.CustomerTrace *.new(..))&quot;; TimeAspect–应用耗时行为切面应用耗时行为切面，环切切点的方法，记录方法调用使用的时间： private static final String POINTCUT_METHOD = &quot;execution(* android.app.Activity.onCreate(..))&quot;; private static final String POINTCUT_METHOD1 = &quot;execution(* android.app.Fragment.onCreateView(..))&quot;; 耗时操作的注解必须是@Around,执行代码中需要调用processd方法，不然程序会卡住不执行。 @Around(“methodAnnotatedWithTimeTrace() || methodAnnotatedWithTimeTrace1()”) public Object weaveJoinPoint(ProceedingJoinPoint joinPoint) throws Throwable { MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature(); String className = methodSignature.getDeclaringType().getName(); String methodName = methodSignature.getName(); LogReceiverUtils.generateBehaviorEventlog(buildLogMessage(className,methodName)); final StopWatch stopWatch = new StopWatch(); stopWatch.start(); Object result = joinPoint.proceed(); stopWatch.stop(); LogReceiverUtils.generateDuringEventlog(className, methodName, String.valueOf(stopWatch.getTotalTimeMillis())); return result; } 日志发送记录模板日志的记录和发送策略在这里不做详细说明，大家可以参考友盟和bugtags，策略宗旨就是不影响用户APP的使用，不占用过多流量，最好将日志压缩存储，当处于高速网络时发送。github上我的项目不是我封装的最终项目，只是一个大体的例子，还有好多内容需要丰富和重新规整。 参考文章： 这位德国大帅哥的github","raw":null,"content":null,"categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://abelzzg.com/tags/android/"}]},{"title":"anroid与服务器端保持会话方式","slug":"anroid与服务器端保持会话方式","date":"2016-03-01T03:39:06.000Z","updated":"2017-02-23T01:58:18.000Z","comments":true,"path":"2016/03/01/anroid与服务器端保持会话方式/","link":"","permalink":"http://abelzzg.com/2016/03/01/anroid与服务器端保持会话方式/","excerpt":"","text":"anroid与服务器端保持会话方式Android提供Http访问的方式有两种，一种是HttpClient，一种是HttpUrlConnection.这两种方式都可以通过sessionID的保存来保持和服务端的会话 httpClient其实保持HttpClient的请求Session，就是保证在每次Http请求访问的请求头信息的Cookie参数中，携带同一个JSESSIONID，只要保证每次是一样的，服务器就认为是同一Session，这就保持了Seesion会话。那么这个JSESSIONID是怎么来的呢，是服务器通过响应头信息给的，服务器在给客户端设置Cookie时，会通过响应头信息中的Set-Cookie参数传递回来，只要有新设置的Cookie，就是通过这个传递过来，如果没有则是null，那么就可以在请求完之后返回的信息里读取这个Set-Cookie头信息，然后保存起来，在下次请求的时候给服务器发送过去，就实现了保持Seesion的目的。代码如下： //定义储存Cookie信息 private String cookies; public void executeGet(String url) throws ClientProtocolException, IOException{ HttpClient httpClient=new DefaultHttpClient(); HttpGet httpGet=new HttpGet(url); setRequestCookies(httpGet); HttpResponse response=httpClient.execute(httpGet); appendCookies(response); } /** * 设置请求的Cookie头信息 * @param reqMsg */ private void setRequestCookies(HttpMessage reqMsg) { if(!TextUtils.isEmpty(cookies)){ reqMsg.setHeader(&quot;Cookie&quot;, cookies); } } /** * 把新的Cookie头信息附加到旧的Cookie后面 * 用于下次Http请求发送 * @param resMsg */ private void appendCookies(HttpMessage resMsg) { Header setCookieHeader=resMsg.getFirstHeader(&quot;Set-Cookie&quot;); if (setCookieHeader != null &amp;&amp; TextUtils.isEmpty(setCookieHeader.getValue())) { String setCookie=setCookieHeader.getValue(); if(TextUtils.isEmpty(cookies)){ cookies=setCookie; }else{ cookies=cookies+&quot;; &quot;+setCookie; } } } 当我们需要重新设置Seesion的时候，请求我们保存的cookie即可，这样代码就会重新获取。如果都有个账号并发备份，那么一个账号分配一个cookie变量存储即可，也就是把上面的代码放到一个如HttpManager管理的类里，每个账号的备份都可以new个HttpManager实例，这样每个账号都可以单独处理自己的Cookie，互不干扰。 HttpUrlConnection获取Cookie： URL url = new URL(requrl); HttpURLConnection con= (HttpURLConnection) url.openConnection(); // 取得sessionid. String cookieval = con.getHeaderField(&quot;set-cookie&quot;); String sessionid; if(cookieval != null) { sessionid = cookieval.substring(0, cookieval.indexOf(&quot;;&quot;)); } //sessionid值格式：JSESSIONID=AD5F5C9EEB16C71EC3725DBF209F6178，是键值对，不是单指值发送设置cookie： URL url = new URL(requrl); HttpURLConnectioncon= (HttpURLConnection) url.openConnection(); if(sessionid != null) { con.setRequestProperty(&quot;cookie&quot;, sessionid); } 只要设置了sessionID，这样web服务器在接受请求的时候就会自动搜索对应的session了，从而保证了在同一会话Session。","raw":null,"content":null,"categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://abelzzg.com/tags/android/"}]},{"title":"使用hexo遇到的坑","slug":"使用hexo遇到的坑","date":"2016-02-12T10:19:56.000Z","updated":"2017-02-23T02:02:02.000Z","comments":true,"path":"2016/02/12/使用hexo遇到的坑/","link":"","permalink":"http://abelzzg.com/2016/02/12/使用hexo遇到的坑/","excerpt":"","text":"使用hexo时遇到的坑hexo g命令报错$hexo-blog hexo g INFO Start processing ERROR Process failed: _posts/Helloworld.md TypeError: Cannot read property &apos;offset&apos; of null 这个问题就牛逼了，各种google、百度，用命令hexo g 时，报错Cannot read property ‘offset’ of null，刚开始以为是node版本问题，需要更新到最新版本。也有可能是我用了yilia的主题，忽略了hexo的根目录下的json代码块 jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 需要加入到 _config.yml中。最后找到原因了😄–根目录的_config.yml文件中时区配置我改成了timezone: Asia/Beijing，这个改回Shanghai就ok了，具体为啥，我也没弄明白。 更新node方式如下mac上OS11以后权限有所变化，输入sudo brew upgrade node命令后，会报错误提示，无法跟以前一样愉快地更新node Error: Running Homebrew as root is extremely dangerous and no longer supported. As Homebrew does not drop privileges on installation you would be giving all build scripts full access to your system. 所以要另求他法，链接在此 同时怕这个链接，年久失效，也在这里记录一下。 切记要按照步骤: 第一步，先查看本机node.js版本： $ node -v 第二步，清除node.js的cache： $ sudo npm cache clean -f 第三步，安装 n 工具，这个工具是专门用来管理node.js版本的，别怀疑这个工具的名字，是他是他就是他，他的名字就是 &quot;n&quot; $ sudo npm install -g n 第四步，安装最新版本的node.js $ sudo n stable 第五步，再次查看本机的node.js版本： $ node -v 这里的第一步和第五步完全可以省略，只是个人比较喜欢查看一下，满足自己的眼睛。第二步比较重要，有些可以省略有些就不行，一律使用准没错。如果你的sudo n stable第一还能下载node，但是下到一半就报错，然后再打一遍命令就没反应了。那也是因为os的版本太高了，做了文件读写的权限控制，所以上网搜一下怎么让sudo真正能获取root权限。这要靠你们自己动手了。 github发布后404本地运行成功后，满怀希望得deploy到github，激动地打了自己的域名abelzzg.github.io,居然404了，来回又看了两边命令是不是少了什么。之前我也没有注意到发布hexo到github的作者在写使用说明时，有一句 建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】 额滴个神呐，费了我好一大段功夫（其实也就10分钟），可是心累呀。然后hexo的根目录上必须写成 deploy: type: git repo: https://github.com/Abelzzg/abelzzg.github.io.git branch: master 意思就是说我github上的库名字都建错了，删了重新来。然后就OK了。👏👏","raw":null,"content":null,"categories":[],"tags":[{"name":"关于博客","slug":"关于博客","permalink":"http://abelzzg.com/tags/关于博客/"}]},{"title":"helloworld","slug":"helloworld","date":"2016-01-22T08:39:06.000Z","updated":"2017-02-23T01:58:33.000Z","comments":true,"path":"2016/01/22/helloworld/","link":"","permalink":"http://abelzzg.com/2016/01/22/helloworld/","excerpt":"","text":"","raw":null,"content":null,"categories":[],"tags":[{"name":"自便吧","slug":"自便吧","permalink":"http://abelzzg.com/tags/自便吧/"}]},{"title":"第一篇正式blog","slug":"第一篇blog","date":"2016-01-22T08:39:06.000Z","updated":"2017-02-23T02:02:31.000Z","comments":true,"path":"2016/01/22/第一篇blog/","link":"","permalink":"http://abelzzg.com/2016/01/22/第一篇blog/","excerpt":"","text":"为什么要有自己的博客刚过完年回来，又是技术界的多事之春，金三银四的日子马上又要来了。公司组织架构变动很大，暂时还没有什么活干（因为年前冲绩效都干完了），不少同事选择了离职，撩得我也春心荡漾，想着能趁这个机会好好学习学习，总结巩固之前做的东西，然后…然后…哇哈哈（让我YY一下） 上稀土掘金去年开始天天刷稀土掘金，把黄易给卸载了，太浪费时间。掘金上发现好多大神都有自己的私人博客，有的甚至买了域名，好像很高大上。里面记录了一些自己做技术的心得和总结，也有不少是跟技术无关跟心态有关的，非常有意思。逐渐就看上看这些程序猿们的文章，有点志同道合的感觉，但是比起技术来，我就是个渣，但是比起屌丝，我就是屌王。 反思自己突然发现已经毕业三年了，居然没有自己的博客。刚毕业上csdn上写过几篇，可能是自己太肤浅了，毛还没长齐就想写技术博客，发现没有什么浏览量，后来也就懒得写了，再后来上csdn，发现我的文章被封了，不知道为啥，占用你们服务器的内存了吗？那我诚恳的向你们道歉！。都说技术3年是一个坎，要么默默无闻做技术宅男，要么升职加薪做上小领导。回头看看我，除了做android还凑合以外，基本没啥长处，去面试估计也不会有什么好的归宿，所以决心发奋图强开始写blog，监督自己不再虚度时光，况且程序员的职业生涯也不长，就连我妈都知道做这样要不停学习新技术，每天打电话就离不开要问我“最近有没有学习？”“还是要学一些东西的，要不然不好涨工资”。 关于写作技巧从小作文写不好，但是总是能抄到，能蒙混过关，后来抄多了发现，如果哪次考试是自己写的，还能拿到比抄的作文更高一些的分数，后来就变成自己写了，虽然也写不好，但是也算是锻炼。啰嗦完了，准备deploy吧，还没有原创，先把收藏在elephant里面的技术文章copy一下吧！哎，还得转成.md格式的，心累呀……","raw":null,"content":null,"categories":[],"tags":[]}]}